---

- name: install required debian packages
  apt:
    pkg:
    - git

# - name: copy nextcloud docker-compose file
#   copy:
#     content: "{{ nextcloud_docker_compose }}"
#     dest: "{{ nextcloud_project_directory }}/docker-compose.yaml"

# - name: deploy nextcloud docker-compose
#   community.docker.docker_compose:
#     project_name: "{{ nextcloud_project_name }}"
#     project_src: "{{ nextcloud_project_directory }}"
#   register: _nextcloud_docker_compose

- name: create directory
  file: path={{remote_path}} state=directory

- name: copy all static files
  synchronize:
    recursive: true
    src: "./" # relative to ./files on local role path
    dest: "{{remote_path}}" # relative to ~/ on remote

- name: copy some templated .j2 files
  template:
    src: "{{item}}" # relative to ./templates on local role path
    dest: "{{remote_path}}/{{ item | regex_replace(role_path+'/templates/', '') | regex_replace('\\.j2', '') }}" # relative to ~/ on remote
  with_items:
    - "docker-compose.yaml.j2"
    - "env.j2"

- name: create directory for ssl certificates
  file:
    path: "/ssl-certs/"
    state: directory

- name: create traefik config directory
  file: path={{traefik_directory}}/conf.d state=directory

- name: copy traefik dynamic config
  copy:
    content: "{{ traefik_dynamic_config | to_nice_yaml(indent=2, width=777) }}"
    dest: "{{traefik_directory}}/conf.d/{{project_name}}.yaml"

# Creation of networks, images, containers
- name: create docker networks
  docker_network:
    name: "{{ item }}"
  loop:
  - "{{project_name}}"
  - "proxy"
  # driver: overlay


- name: deploy docker-compose stack
  docker_compose:
    project_src: "{{remote_path}}/"
    # add multiple docker-compose.yaml / .yml files below
    files: "{{item}}"
    # This option ensures that the images are rebuilt
    build: true
  with_items:
    - "docker-compose.yaml"
  # register: _nextcloud_docker_compose

# 
# 
# 
# 
# 
# 
# 
# 

# - name: check nextcloud status
#   community.docker.docker_container_exec:
#     container: "{{nextcloud_app_container_name}}"
#     user: www-data
#     command: php occ status --output=json
#   register: _nextcloud_status_task
#   changed_when: false
#   retries: 60
#   delay: 1
#   until: _nextcloud_status_task is not failed

# - name: install nextcloud
#   when: not _nextcloud_status.installed
#   community.docker.docker_container_exec:
#     container: "{{nextcloud_app_container_name}}"
#     user: www-data
#     command:
#       php occ maintenance:install
#       --admin-user "{{ nextcloud_admin_user }}"
#       --admin-pass "{{ nextcloud_admin_pass }}"
