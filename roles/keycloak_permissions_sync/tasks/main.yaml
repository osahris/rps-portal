---

- import_tasks: secrets.yaml

- name: create application directory
  file:
    path: "{{sync_path}}"
    state: directory

- name: create application files from templates
  template:
    src: "{{item}}"
    dest: "{{sync_path}}/{{item | regex_replace('\\.j2$', '') }}"
  with_items:
    - "docker-compose.yaml.j2"
    - "env.j2"

- name: set keycloak client config
  local_action: keycloak_client
  become: false
  args:
    auth_client_id: "{{ keycloak_permissions_sync_keycloak_client_auth_client_id }}"
    auth_keycloak_url: "https://{{ keycloak_permissions_sync_keycloak_client_auth_keycloak_url }}"
    auth_realm: "{{ keycloak_permissions_sync_keycloak_client_auth_realm }}"
    auth_username: "{{ keycloak_permissions_sync_keycloak_client_auth_username }}"
    auth_password: "{{ keycloak_permissions_sync_keycloak_client_auth_password }}"
    client_id: "{{ keycloak_permissions_sync_keycloak_client_client_id }}"
    realm: "{{ keycloak_permissions_sync_keycloak_client_realm }}"
    client_authenticator_type: client-secret
    secret: "{{ keycloak_permissions_sync_keycloak_client_secret }}"
    state: present
    direct_access_grants_enabled: true
    service_accounts_enabled: true
    validate_certs: "{{ keycloak_permissions_sync_keycloak_client_validate_certs | default(true) }}"
    # backchannel logout url: https://my.permission_sync.org/apps/user_oidc/backchannel-logout/{{client_id}}
    protocol_mappers:
      - name: groups
        config:
          access.token.claim: 'false'
          claim.name: groups
          full.path: 'false'
          id.token.claim: 'false'
          userinfo.token.claim: 'true'
        consentRequired: false
        protocol: openid-connect
        protocolMapper: oidc-group-membership-mapper
  #TODO: figure out how to use a custom CA cert here
  # environment:
  #   REQUESTS_CA_BUNDLE: /home/mkb/abrechnungspipeline/files/certs/nukleus_prod_2022_root_ca.crt

- name: "Create access_token for keycloak for user {{ keycloak_permissions_sync_keycloak_client_auth_username }}"
  local_action: uri
  become: false
  args:
    url: "https://{{ keycloak_permissions_sync_keycloak_client_auth_keycloak_url }}/realms/master/protocol/openid-connect/token"
    method: POST
    validate_certs: "{{ keycloak_validate_certs }}"
    body_format: form-urlencoded
    body:
      username: "{{ keycloak_permissions_sync_keycloak_client_auth_username }}"
      password: "{{ keycloak_permissions_sync_keycloak_client_auth_password | mandatory }}"
      grant_type: "password"
      client_id: "admin-cli"
  register: keycloak_token

- name: Map a client role to a service account user for a client, authentication with credentials
  community.general.keycloak_user_rolemapping:
    realm: "{{ keycloak_permissions_sync_keycloak_client_realm }}"
    auth_keycloak_url: "https://{{ keycloak_permissions_sync_keycloak_client_auth_keycloak_url }}"
    token: "{{ keycloak_token.json.access_token }}"
    state: present
    client_id: realm-management
    service_account_user_client_id : "{{ keycloak_permissions_sync_keycloak_client_client_id }}"
    roles:
      - name: realm-admin

- name: Map a client role to a service account user for a client, authentication with credentials
  community.general.keycloak_user_rolemapping:
    realm: "{{ keycloak_permissions_sync_keycloak_client_realm }}"
    auth_keycloak_url: "https://{{ keycloak_permissions_sync_keycloak_client_auth_keycloak_url }}"
    token: "{{ keycloak_token.json.access_token }}"
    state: present
    client_id: account
    service_account_user_client_id : "{{ keycloak_permissions_sync_keycloak_client_client_id }}"
    roles:
      - name: view-groups

- name: deploy docker-compose stack
  docker_compose:
    project_src: "{{sync_path}}/"
    files: "docker-compose.yaml"
    pull: true
    remove_orphans: true