templates:
  - "templates/web.template.yml"
{% if discourse_web_ratelimited %}
  - "templates/web.ratelimited.template.yml"
{% endif %}
{% if discourse_letsencrypt_account_email is defined %}
  - "templates/web.ssl.template.yml"
  - "templates/web.letsencrypt.ssl.template.yml"
{% endif %}

## which TCP/IP ports should this container expose?
## If you want Discourse to share a port with another webserver like Apache or nginx,
## see https://meta.discourse.org/t/17247 for details
expose:
  - "80:80"   # http
  - "443:443" # https

# Use 'links' key to link containers together, aka use Docker --link flag.
links:
  - link:
      name: redis
      alias: redis
  - link:
      name: postgres
      alias: postgres

# any extra arguments for Docker?
# docker_args:

params:
  ## Which Git revision should this container use? (default: tests-passed)
  #version: tests-passed

env:
  LANG: {{locales|to_json}}

  ## How many concurrent web requests are supported? Depends on memory and CPU cores.
  ## will be set automatically by bootstrap based on detected CPUs, or you can override
  #UNICORN_WORKERS: 3

  ## The domain name this Discourse instance will respond to
  DISCOURSE_HOSTNAME: "{{discourse_hostname}}"

  ## Uncomment if you want the container to be started with the same
  ## hostname (-h option) as specified above (default "$hostname-$config")
  #DOCKER_USE_HOSTNAME: true

  ## List of comma delimited emails that will be made admin and developer
  ## on initial signup example 'user1@example.com,user2@example.com'
  DISCOURSE_DEVELOPER_EMAILS: "{{discourse_admin_users|join(',')}}"

  ## TODO: The SMTP mail server used to validate new accounts and send notifications
  # SMTP ADDRESS, username, and password are required
  # WARNING the char '#' in SMTP password can cause problems!
  DISCOURSE_SMTP_ADDRESS: "{{discourse_smtp_address}}"
  DISCOURSE_SMTP_PORT: "{{discourse_smtp_port}}"
  DISCOURSE_SMTP_USER_NAME: "{{discourse_smtp_user_name}}"
  DISCOURSE_SMTP_PASSWORD: "{{discourse_smtp_password}}"
  #DISCOURSE_SMTP_ENABLE_START_TLS: true           # (optional, default true)

{% if discourse_letsencrypt_account_email is defined %}
  ## If you added the Lets Encrypt template, uncomment below to get a free SSL certificate
  LETSENCRYPT_ACCOUNT_EMAIL: "{{discourse_letsencrypt_account_email}}"
{% endif %}

  ## configure connectivity to the databases
  DISCOURSE_DB_SOCKET: ''
  DISCOURSE_DB_USERNAME: discourse
  DISCOURSE_DB_PASSWORD: "{{discourse_database_password}}"
  DISCOURSE_DB_HOST: postgres
  DISCOURSE_REDIS_HOST: redis

  ## The CDN address for this Discourse instance (configured to pull)
  #DISCOURSE_CDN_URL: //discourse-cdn.example.com

volumes:
  - volume:
      host: /var/lib/discourse/shared/web
      guest: /shared
  - volume:
      host: /var/lib/discourse/shared/web/log/var-log
      guest: /var/log

## Plugins go here
## see https://meta.discourse.org/t/19157 for details
hooks:
  after_code:
    - exec:
        cd: $home/plugins
        cmd:
          - git clone https://github.com/discourse/docker_manager.git

## Remember, this is YAML syntax - you can only have one block with a name
run:
  - exec: echo "Beginning of custom commands"

  ## If you want to configure password login for root, uncomment and change:
  ## Use only one of the following lines:
  #- exec: /usr/sbin/usermod -p 'PASSWORD_HASH' root
  #- exec: /usr/sbin/usermod -p "$(mkpasswd -m sha-256 'RAW_PASSWORD')" root

  ## If you want to authorized additional users, uncomment and change:
  #- exec: ssh-import-id username
  #- exec: ssh-import-id anotherusername

  - exec: echo "End of custom commands"
  - exec: awk -F\# '{print $1;}' ~/.ssh/authorized_keys | awk 'BEGIN { print "Authorized SSH keys for this container:"; } NF>=2 {print $NF;}'
