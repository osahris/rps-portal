---
keycloak_server_name: "keycloak.{{ inventory_hostname }}"
keycloak_realms:
- name: rps
  # groups that should be created in our realm
  groups:
  - developers
  - support
  - scientists
  - vip
  roles:
  - approved
  # external_idps:
  # - alias: "external-identity-provider"
  #   display_name: "External"
  #   client_id: "external"
  #   client_secret: "ClientSecretFromIdP"
  #   authorization_url: "https://example.com/realms/users/protocol/openid-connect/auth"
  #   token_url: "https://example.com/realms/users/protocol/openid-connect/token"
  #   userinfo_url: "https://example.com/realms/users/protocol/openid-connect/userinfo"
  #   issuer: "https://example.com/realms/users"
  #   sync_mode: force
  #   import:
  #     # when the user is in "remote_group" they should be assigned role "testrole" in our realm
  #     # note that this requires a "groups" claim containing a list of groups (i.e. create a a client mapper with "Group Membership" on the remote keycloak)
  #     - name: "testrole"
  #       type: "role_from_group"
  #       from_group: "remote_group"
  #     # group "test" should be assigned when user is in "test" group on the remote side
  #     - name: "test"
  #       type: "group"
  #     # group "test2" should be assigned when user is in "test" group on the remote side. from defaults to name of group
  #     - name: "test2"
  #       type: "group"
  #       from: "test"
- name: projektportal
  # subrealm is a subrealm. so it doesn't have its own login form but redirects to the parent_realm and imports users from there
  parent_realm:
    # name of parent_realm (on the same keycloak server)
    name: rps
    # whatever secret you want. use ansible_vault or something else
    client_secret: "{{ keycloak_subrealm_client_secret }}"
    import:
    # import user attribute "title" from parent_realm
    - name: "title"
      type: "attribute"
    # import test group from parent_realm
    - name: "test"
      type: "group"
    # import test2 group from group test in parent_realm
    - name: "test2"
      type: "group"
      from: "test"
    # assign "test" role when user is in "test2" group in parent_realm
    - name: "test"
      type: "role_from_group"
      from_group: "test2"
    # user must be in group "test" or "test2" (you probably need to somehow import it - see above - or set it manually after initial import)
    required_groups:
    - "test"
    - "test2"
    # same just for roles
    required_roles:
    - "test"
  groups:
  - "test"
  roles:
  - "test"
